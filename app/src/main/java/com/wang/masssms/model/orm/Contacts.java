package com.wang.masssms.model.orm;

import java.util.List;
import com.wang.masssms.model.orm.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CONTACTS".
 */
public class Contacts {

    private Long id;
    private String phonenumber;
    private String name;
    private java.util.Date creattime;
    private java.util.Date lastmodify;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactsDao myDao;

    private List<ContactToGroup> cid;
    private List<ContactToMessage> cmid;

    public Contacts() {
    }

    public Contacts(Long id) {
        this.id = id;
    }

    public Contacts(Long id, String phonenumber, String name, java.util.Date creattime, java.util.Date lastmodify) {
        this.id = id;
        this.phonenumber = phonenumber;
        this.name = name;
        this.creattime = creattime;
        this.lastmodify = lastmodify;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPhonenumber() {
        return phonenumber;
    }

    public void setPhonenumber(String phonenumber) {
        this.phonenumber = phonenumber;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public java.util.Date getCreattime() {
        return creattime;
    }

    public void setCreattime(java.util.Date creattime) {
        this.creattime = creattime;
    }

    public java.util.Date getLastmodify() {
        return lastmodify;
    }

    public void setLastmodify(java.util.Date lastmodify) {
        this.lastmodify = lastmodify;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ContactToGroup> getCid() {
        if (cid == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactToGroupDao targetDao = daoSession.getContactToGroupDao();
            List<ContactToGroup> cidNew = targetDao._queryContacts_Cid(id);
            synchronized (this) {
                if(cid == null) {
                    cid = cidNew;
                }
            }
        }
        return cid;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCid() {
        cid = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ContactToMessage> getCmid() {
        if (cmid == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactToMessageDao targetDao = daoSession.getContactToMessageDao();
            List<ContactToMessage> cmidNew = targetDao._queryContacts_Cmid(id);
            synchronized (this) {
                if(cmid == null) {
                    cmid = cmidNew;
                }
            }
        }
        return cmid;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetCmid() {
        cmid = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
