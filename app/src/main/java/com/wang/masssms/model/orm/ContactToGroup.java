package com.wang.masssms.model.orm;

import com.wang.masssms.model.orm.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CONTACT_TO_GROUP".
 */
public class ContactToGroup {

    private Long id;
    private Long cid;
    private Long gid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ContactToGroupDao myDao;

    private Contacts contacts;
    private Long contacts__resolvedKey;

    private ContactGroup contactGroup;
    private Long contactGroup__resolvedKey;


    public ContactToGroup() {
    }

    public ContactToGroup(Long id) {
        this.id = id;
    }

    public ContactToGroup(Long id, Long cid, Long gid) {
        this.id = id;
        this.cid = cid;
        this.gid = gid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getContactToGroupDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getCid() {
        return cid;
    }

    public void setCid(Long cid) {
        this.cid = cid;
    }

    public Long getGid() {
        return gid;
    }

    public void setGid(Long gid) {
        this.gid = gid;
    }

    /** To-one relationship, resolved on first access. */
    public Contacts getContacts() {
        Long __key = this.cid;
        if (contacts__resolvedKey == null || !contacts__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactsDao targetDao = daoSession.getContactsDao();
            Contacts contactsNew = targetDao.load(__key);
            synchronized (this) {
                contacts = contactsNew;
            	contacts__resolvedKey = __key;
            }
        }
        return contacts;
    }

    public void setContacts(Contacts contacts) {
        synchronized (this) {
            this.contacts = contacts;
            cid = contacts == null ? null : contacts.getId();
            contacts__resolvedKey = cid;
        }
    }

    /** To-one relationship, resolved on first access. */
    public ContactGroup getContactGroup() {
        Long __key = this.gid;
        if (contactGroup__resolvedKey == null || !contactGroup__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ContactGroupDao targetDao = daoSession.getContactGroupDao();
            ContactGroup contactGroupNew = targetDao.load(__key);
            synchronized (this) {
                contactGroup = contactGroupNew;
            	contactGroup__resolvedKey = __key;
            }
        }
        return contactGroup;
    }

    public void setContactGroup(ContactGroup contactGroup) {
        synchronized (this) {
            this.contactGroup = contactGroup;
            gid = contactGroup == null ? null : contactGroup.getId();
            contactGroup__resolvedKey = gid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
